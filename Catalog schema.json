{
  "Catalog": {
    "type": "object",
    "properties": {
      "bpp/descriptor": {
        "$ref": "#/components/schemas/Descriptor"
      },
      "bpp/categories": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Category"
        }
      },
      "bpp/fulfillments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Fulfillment"
        }
      },
      "bpp/payments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Payment"
        }
      },
      "bpp/offers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Offer"
        }
      },
      "bpp/providers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Provider"
        }
      },
      "exp": {
        "type": "string",
        "description": "Time after which catalog has to be refreshed",
        "format": "date-time"
      }
    },
    "description": "Describes a Seller App catalog"
  },
  "Category": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "Unique id of the category"
      },
      "parent_category_id": {
        "type": "string",
        "description": "Unique id of the parent category"
      },
      "descriptor": {
        "$ref": "#/components/schemas/Descriptor"
      },
      "time": {
        "$ref": "#/components/schemas/Time"
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes a category"
  },
  "DecimalValue": {
    "pattern": "[+-]?([0-9]*[.])?[0-9]+",
    "type": "string",
    "description": "Describes a decimal value"
  },
  "Descriptor": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "code": {
        "type": "string"
      },
      "symbol": {
        "type": "string"
      },
      "short_desc": {
        "type": "string"
      },
      "long_desc": {
        "type": "string"
      },
      "images": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Image"
        }
      },
      "audio": {
        "type": "string",
        "format": "uri"
      },
      "3d_render": {
        "type": "string",
        "format": "uri"
      },
      "tags": {
        "type": "array",
        "description": "A list of tags containing any additional information sent along with the Acknowledgement.",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes the description of a real-world object."
  },
  "Document": {
    "type": "object",
    "properties": {
      "url": {
        "type": "string",
        "format": "uri"
      },
      "label": {
        "type": "string"
      }
    },
    "description": "Describes a document which can be sent as a url"
  },
  "Domain": {
    "type": "string",
    "description": "Codification of domain for ONDC",
    "enum": [
      "nic2004:52110"
    ]
  },
  "Fee": {
    "type": "object",
    "properties": {
      "percentage": {
        "description": "Percentage of a value",
        "allOf": [
          {
            "$ref": "#/components/schemas/DecimalValue"
          }
        ]
      },
      "amount": {
        "description": "A fixed value",
        "allOf": [
          {
            "$ref": "#/components/schemas/Price"
          }
        ]
      }
    },
    "description": "A fee applied on a particular entity"
  },
  "Fulfillment": {
    "required": [
      "id",
      "type"
    ],
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "Unique reference ID to the fulfillment of an order"
      },
      "type": {
        "type": "string",
        "description": "This describes the type of fulfillment (\"Pickup\" - Buyer picks up from store by themselves or through their logistics provider; \"Delivery\" - seller delivers to buyer)",
        "enum": [
          "Delivery",
          "Pickup",
          "Delivery and Pickup",
          "Reverse QC"
        ]
      },
      "@ondc/org/category": {
        "type": "string",
        "description": "Fulfillment Category"
      },
      "@ondc/org/TAT": {
        "type": "string",
        "description": "fulfillment turnaround time in ISO8601 durations format e.g. 'PT24H' indicates 24 hour TAT"
      },
      "provider_id": {
        "$ref": "#/components/schemas/Provider/properties/id"
      },
      "@ondc/org/provider_name": {
        "type": "string"
      },
      "rating": {
        "$ref": "#/components/schemas/Rating/properties/value"
      },
      "state": {
        "$ref": "#/components/schemas/State"
      },
      "tracking": {
        "type": "boolean",
        "description": "Indicates whether the fulfillment allows tracking",
        "default": false
      },
      "customer": {
        "$ref": "#/components/schemas/Fulfillment_customer"
      },
      "agent": {
        "$ref": "#/components/schemas/Agent"
      },
      "person": {
        "$ref": "#/components/schemas/Person"
      },
      "contact": {
        "$ref": "#/components/schemas/Contact"
      },
      "vehicle": {
        "$ref": "#/components/schemas/Vehicle"
      },
      "start": {
        "$ref": "#/components/schemas/Fulfillment_start"
      },
      "end": {
        "$ref": "#/components/schemas/Fulfillment_end"
      },
      "rateable": {
        "$ref": "#/components/schemas/Rateable"
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes how a single product/service will be rendered/fulfilled to the end customer"
  },
  "Gps": {
    "pattern": "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$",
    "type": "string",
    "description": "Describes a gps coordinate"
  },
  "ItemQuantity": {
    "type": "object",
    "properties": {
      "allocated": {
        "$ref": "#/components/schemas/ItemQuantity_allocated"
      },
      "available": {
        "$ref": "#/components/schemas/ItemQuantity_allocated"
      },
      "maximum": {
        "$ref": "#/components/schemas/ItemQuantity_maximum"
      },
      "minimum": {
        "$ref": "#/components/schemas/ItemQuantity_allocated"
      },
      "selected": {
        "$ref": "#/components/schemas/ItemQuantity_allocated"
      },
      "unitized": {
        "$ref": "#/components/schemas/ItemQuantity_unitized"
      }
    },
    "description": "Describes count or amount of an item"
  },
  "Item": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "This is the most unique identifier of a service item. An example of an Item ID could be the SKU of a product."
      },
      "parent_item_id": {
        "$ref": "#/components/schemas/Item/properties/id"
      },
      "descriptor": {
        "$ref": "#/components/schemas/Descriptor"
      },
      "price": {
        "$ref": "#/components/schemas/Price"
      },
      "quantity": {
        "$ref": "#/components/schemas/ItemQuantity"
      },
      "category_id": {
        "$ref": "#/components/schemas/Category/properties/id"
      },
      "category_ids": {
        "type": "array",
        "description": "Categories this item can be listed under",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Category/properties/id"
            }
          ]
        }
      },
      "fulfillment_id": {
        "$ref": "#/components/schemas/Fulfillment/properties/id"
      },
      "rating": {
        "$ref": "#/components/schemas/Rating/properties/value"
      },
      "location_id": {
        "$ref": "#/components/schemas/Location/properties/id"
      },
      "time": {
        "$ref": "#/components/schemas/Time"
      },
      "rateable": {
        "$ref": "#/components/schemas/Rateable"
      },
      "matched": {
        "type": "boolean"
      },
      "related": {
        "type": "boolean"
      },
      "recommended": {
        "type": "boolean"
      },
      "@ondc/org/returnable": {
        "type": "boolean",
        "description": "whether the item is returnable"
      },
      "@ondc/org/seller_pickup_return": {
        "type": "boolean",
        "description": "in case of return, whether the item should be picked up by seller"
      },
      "@ondc/org/return_window": {
        "type": "string",
        "description": "return window for the item in ISO8601 durations format e.g. 'PT24H' indicates 24 hour return window. Mandatory if \"@ondc/org/returnable\" is \"true\""
      },
      "@ondc/org/cancellable": {
        "type": "boolean",
        "description": "whether the item is cancellable"
      },
      "@ondc/org/time_to_ship": {
        "type": "string",
        "description": "time from order confirmation by which item ready to ship in ISO8601 durations format (e.g. 'PT30M' indicates item ready to ship in 30 mins). Mandatory for category_id \"F&B\""
      },
      "@ondc/org/available_on_cod": {
        "type": "boolean",
        "description": "whether the catalog item is available on COD"
      },
      "@ondc/org/contact_details_consumer_care": {
        "type": "string",
        "description": "contact details for consumer care"
      },
      "@ondc/org/statutory_reqs_packaged_commodities": {
        "$ref": "#/components/schemas/Item_ondcorgstatutory_reqs_packaged_commodities"
      },
      "@ondc/org/statutory_reqs_prepackaged_food": {
        "$ref": "#/components/schemas/Item_ondcorgstatutory_reqs_prepackaged_food"
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes a product or a service offered to the end consumer by the provider"
  },
  "Offer": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string"
      },
      "descriptor": {
        "$ref": "#/components/schemas/Descriptor"
      },
      "location_ids": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Location/properties/id"
        }
      },
      "category_ids": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Category/properties/id"
        }
      },
      "item_ids": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Item/properties/id"
        }
      },
      "time": {
        "$ref": "#/components/schemas/Time"
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes an offer"
  },
  "Payment": {
    "type": "object",
    "properties": {
      "uri": {
        "type": "string",
        "description": "A payment uri to be called by the Buyer App. If empty, then the payment is to be done offline. The details of payment should be present in the params object. If ```tl_method``` = http/get, then the payment details will be sent as url params. Two url param values, ```$transaction_id``` and ```$amount``` are mandatory. And example url would be : https://www.example.com/pay?txid=$transaction_id&amount=$amount&vpa=upiid&payee=shopez&billno=1234",
        "format": "uri"
      },
      "tl_method": {
        "type": "string",
        "enum": [
          "http/get",
          "http/post",
          "payto",
          "upi"
        ]
      },
      "params": {
        "$ref": "#/components/schemas/Payment_params"
      },
      "type": {
        "type": "string",
        "enum": [
          "ON-ORDER",
          "PRE-FULFILLMENT",
          "ON-FULFILLMENT",
          "POST-FULFILLMENT"
        ]
      },
      "status": {
        "type": "string",
        "enum": [
          "PAID",
          "NOT-PAID"
        ]
      },
      "time": {
        "$ref": "#/components/schemas/Time"
      },
      "collected_by": {
        "type": "string",
        "enum": [
          "BAP",
          "BPP"
        ]
      },
      "@ondc/org/collected_by_status": {
        "type": "string",
        "enum": [
          "Assert",
          "Agree",
          "Disagree",
          "Terminate"
        ]
      },
      "@ondc/org/buyer_app_finder_fee_type": {
        "type": "string",
        "enum": [
          "Amount",
          "Percent"
        ]
      },
      "@ondc/org/buyer_app_finder_fee_amount": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "@ondc/org/withholding_amount": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "@ondc/org/withholding_amount_status": {
        "type": "string",
        "enum": [
          "Assert",
          "Agree",
          "Disagree",
          "Terminate"
        ]
      },
      "@ondc/org/return_window": {
        "type": "string",
        "description": "return window for withholding amount in ISO8601 durations format e.g. 'PT24H' indicates 24 hour return window"
      },
      "@ondc/org/return_window_status": {
        "type": "string",
        "enum": [
          "Assert",
          "Agree",
          "Disagree",
          "Terminate"
        ]
      },
      "@ondc/org/settlement_basis": {
        "type": "string",
        "description": "In case of prepaid payment, whether settlement between counterparties should be on the basis of collection, shipment or delivery",
        "enum": [
          "shipment",
          "delivery",
          "return_window_expiry"
        ]
      },
      "@ondc/org/settlement_basis_status": {
        "type": "string",
        "enum": [
          "Assert",
          "Agree",
          "Disagree",
          "Terminate"
        ]
      },
      "@ondc/org/settlement_window": {
        "type": "string",
        "description": "settlement window for the counterparty in ISO8601 durations format e.g. 'PT48H' indicates 48 hour return window"
      },
      "@ondc/org/settlement_window_status": {
        "type": "string",
        "enum": [
          "Assert",
          "Agree",
          "Disagree",
          "Terminate"
        ]
      },
      "@ondc/org/settlement_details": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Payment_ondcorgsettlement_details"
        }
      }
    },
    "description": "Describes a payment"
  },
  "Price": {
    "type": "object",
    "properties": {
      "currency": {
        "type": "string",
        "description": "ISO 4217 alphabetic currency code e.g. 'INR'"
      },
      "value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "estimated_value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "computed_value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "listed_value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "offered_value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "minimum_value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "maximum_value": {
        "$ref": "#/components/schemas/DecimalValue"
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes the price of an item. Allows for domain extension."
  },
  "Provider": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "Id of the provider"
      },
      "descriptor": {
        "$ref": "#/components/schemas/Descriptor"
      },
      "category_id": {
        "type": "string",
        "description": "Category Id of the provider"
      },
      "@ondc/org/fssai_license_no": {
        "type": "string",
        "description": "FSSAI license no. Mandatory for category_id \"F&B\""
      },
      "rating": {
        "$ref": "#/components/schemas/Rating/properties/value"
      },
      "time": {
        "$ref": "#/components/schemas/Time"
      },
      "categories": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Category"
        }
      },
      "creds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Credential"
        }
      },
      "fulfillments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Fulfillment"
        }
      },
      "payments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Payment"
        }
      },
      "locations": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Location"
            },
            {
              "type": "object",
              "properties": {
                "rateable": {
                  "$ref": "#/components/schemas/Rateable"
                }
              }
            }
          ]
        }
      },
      "offers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Offer"
        }
      },
      "items": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Item"
        }
      },
      "ttl": {
        "type": "string",
        "description": "Validity of catalog in ISO8601 durations format after which it has to be refreshed e.g. 'P7D' indicates validity of 7 days; value of 0 indicates catalog is not cacheable"
      },
      "exp": {
        "type": "string",
        "description": "Time after which catalog has to be refreshed",
        "format": "date-time"
      },
      "rateable": {
        "$ref": "#/components/schemas/Rateable"
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagGroup"
        }
      }
    },
    "description": "Describes a service provider. This can be a restaurant, a hospital, a Store etc"
  },
  "Quotation": {
    "type": "object",
    "properties": {
      "price": {
        "$ref": "#/components/schemas/Price"
      },
      "breakup": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Quotation_breakup"
        }
      },
      "ttl": {
        "$ref": "#/components/schemas/Duration"
      }
    },
    "description": "Describes a quote"
  },
  "State": {
    "type": "object",
    "properties": {
      "descriptor": {
        "$ref": "#/components/schemas/Descriptor"
      },
      "updated_at": {
        "type": "string",
        "format": "date-time"
      },
      "updated_by": {
        "type": "string",
        "description": "ID of entity which changed the state"
      }
    },
    "description": "Describes a state"
  },
  "Subscriber": {
    "type": "object",
    "properties": {
      "subscriber_id": {
        "type": "string",
        "description": "Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region"
      },
      "type": {
        "type": "string",
        "enum": [
          "bap",
          "bpp",
          "bg"
        ]
      },
      "cb_url": {
        "type": "string",
        "description": "Callback URL of the subscriber. The Registry will call this URL's on_subscribe API to validate the subscriber\\'s credentials"
      },
      "domain": {
        "$ref": "#/components/schemas/Domain"
      },
      "city": {
        "$ref": "#/components/schemas/City/properties/code"
      },
      "country": {
        "$ref": "#/components/schemas/Country/properties/code"
      },
      "signing_public_key": {
        "type": "string",
        "description": "Signing Public key of the subscriber. <br/><br/>Any subscriber platform (Buyer App, Seller App, Gateway) who wants to transact on the network must digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the transport layer header. In case of ```HTTP``` it is the ```Authorization``` header. <br><br/>The ```Authorization``` will be used to validate the signature of a Buyer App or Seller App.<br/><br/>Furthermore, if an API call is being proxied or multicast by a ONDC Gateway, the Gateway must use it\\'s signing key to digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the ```X-Gateway-Authorization``` header."
      },
      "encryption_public_key": {
        "type": "string",
        "description": "Encryption public key of the Buyer App. Any Seller App must encrypt the ```requestBody.message``` value of the ```on_search``` API using this public key."
      },
      "status": {
        "type": "string",
        "enum": [
          "INITIATED",
          "UNDER_SUBSCRIPTION",
          "SUBSCRIBED",
          "INVALID_SSL",
          "UNSUBSCRIBED"
        ]
      },
      "created": {
        "type": "string",
        "description": "Timestamp when a subscriber was added to the registry with status = INITIATED",
        "format": "date-time"
      },
      "updated": {
        "type": "string",
        "format": "date-time"
      },
      "expires": {
        "type": "string",
        "description": "Expiry timestamp in UTC derived from the ```lease_time``` of the subscriber",
        "format": "date-time"
      }
    },
    "description": "Any entity which wants to authenticate itself on a network. This can be a Buyer App, Seller App or Gateway."
  },
  "Tag": {
    "type": "object",
    "properties": {
      "code": {
        "type": "string",
        "description": "The machine-readable name of the tag. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value."
      },
      "name": {
        "type": "string",
        "description": "The human-readable name of the tag. This set by the BPP and rendered as-is by the BAP. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using the `code` property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency."
      },
      "value": {
        "type": "string",
        "description": "The value of the tag. This set by the BPP and rendered as-is by the BAP."
      },
      "display": {
        "type": "boolean",
        "description": "This value indicates if the tag is intended for display purposes. If set to `true`, then this tag must be displayed. If it is set to `false`, it should not be displayed. This value can override the group display value."
      }
    },
    "description": "Describes a tag. This is a simple key-value store which is used to contain extended metadata. This object can be added as a property to any schema to describe extended attributes. For BAPs, tags can be sent during search to optimize and filter search results. BPPs can use tags to index their catalog to allow better search functionality. Tags are sent by the BPP as part of the catalog response in the `on_search` callback. Tags are also meant for display purposes. Upon receiving a tag, BAPs are meant to render them as name-value pairs. This is particularly useful when rendering tabular information about a product or service."
  },
  "TagGroup": {
    "type": "object",
    "properties": {
      "display": {
        "type": "boolean",
        "description": "Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.",
        "default": true
      },
      "code": {
        "type": "string",
        "description": "The machine-readable name of the tag group. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value. Values outside the allowed values may or may not be ignored by the rendering platform. As this schema is purely for catalog display purposes, it is not recommended to send this value during search."
      },
      "name": {
        "type": "string",
        "description": "A human-readable string describing the heading under which the tags are to be displayed. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using code property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency. As this schema is purely for catalog display purposes, it is not recommended to send this value during `search`."
      },
      "list": {
        "type": "array",
        "description": "An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the `search` and achieve more relevant results. When received during `on_search`, BAPs must render this list under the heading described by the `name` property of this schema.",
        "items": {
          "$ref": "#/components/schemas/Tag"
        }
      }
    },
    "description": "A collection of tag objects with group level attributes. For detailed documentation on the Tags and Tag Groups schema go to https://github.com/beckn/protocol-specifications/discussions/316"
  },
  "Time": {
    "type": "object",
    "properties": {
      "label": {
        "type": "string"
      },
      "timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "duration": {
        "$ref": "#/components/schemas/Duration"
      },
      "range": {
        "$ref": "#/components/schemas/Time_range"
      },
      "days": {
        "type": "string",
        "description": "comma separated values representing days of the week"
      },
      "schedule": {
        "$ref": "#/components/schemas/Schedule"
      }
    },
    "description": "Describes time in its various forms. It can be a single point in time; duration; or a structured timetable of operations"
  }
}